apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  namespace: geekembly
  generateName: prod-ci-test
spec:
  volumeClaimTemplates:
    - metadata:
        name: workspace
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 200Mi
  volumes:
    - name: ssh-vol
      secret:
        secretName: github-ssh-key
    - name: docker-vol
      secret:
        secretName: regcred
  entrypoint: start
  templates:
    - name: kaniko-build
      inputs:
        parameters:
          - name: DOCKER_REGISTRY_ADDRESS
          - name: DOCKER_REGISTRY_IMAGE_NAME
          - name: DOCKER_REGISTRY_IMAGE_TAG
          - name: DOCKER_FILE
          - name: INSECURE
            value: true
      container:
        image: gcr.io/kaniko-project/executor:latest
        command:
          - /kaniko/executor
        args:
          - "--dockerfile={{inputs.parameters.DOCKER_FILE}}"
          - "--context=dir:///workspace"
          - "--destination={{inputs.parameters.DOCKER_REGISTRY_ADDRESS}}/{{inputs.parameters.DOCKER_REGISTRY_IMAGE_NAME}}:{{inputs.parameters.DOCKER_REGISTRY_IMAGE_TAG}}"
          - "--insecure={{inputs.parameters.INSECURE}}"
        volumeMounts:
          - name: workspace
            mountPath: /workspace
          - name: docker-vol
            mountPath: /kaniko/.docker/config.json
            subPath: .dockerconfigjson
          - name: docker-vol
            mountPath: /kaniko/.docker/.dockerconfigjson
            subPath: .dockerconfigjson
        resources:
          requests:
            memory: 4Gi

    - name: image-check
      inputs:
        parameters:
          - name: DOCKER_REGISTRY_SERVER_PROTOCOL
            value: "http"
          - name: DOCKER_REGISTRY_ADDRESS
          - name: DOCKER_REGISTRY_IMAGE_NAME
          - name: DOCKER_REGISTRY_IMAGE_TAG
      script:
        image: python:alpine3.6
        command: ["sh"]
        source: |
          #!/bin/sh
          pip install requests &> /dev/null

          python - << EOF
          import os
          import requests
          from requests.auth import HTTPBasicAuth

          protocol = os.getenv('DOCKER_REGISTRY_SERVER_PROTOCOL')
          address = os.getenv('DOCKER_REGISTRY_ADDRESS')
          username = os.getenv('DOCKER_REGISTRY_USERNAME')
          password = os.getenv('DOCKER_REGISTRY_PASSWORD')
          image = os.getenv('DOCKER_REGISTRY_IMAGE_NAME')
          tag = os.getenv('DOCKER_REGISTRY_IMAGE_TAG')

          # Check if the credentials are available
          if username is None or password is None:
              print("Error: Environment variables for username and/or password are not set.")
              exit(1)

          url = f"{protocol}://{address}/v2/{image}/tags/list"
          response = requests.get(url, auth=HTTPBasicAuth(username, password))

          # Check if the request was successful
          tags = []
          if response.status_code == 200:
              tags = response.json()["tags"]

          if tag in tags:
              print("true")
          else:
              print("false")
          EOF

        env:
          - name: DOCKER_REGISTRY_USERNAME
            valueFrom:
              secretKeyRef:
                name: geekembly-registry-cred
                key: username
          - name: DOCKER_REGISTRY_PASSWORD
            valueFrom:
              secretKeyRef:
                name: geekembly-registry-cred
                key: password
          - name: DOCKER_REGISTRY_SERVER_PROTOCOL
            value: "{{inputs.parameters.DOCKER_REGISTRY_SERVER_PROTOCOL}}"
          - name: DOCKER_REGISTRY_ADDRESS
            value: "{{inputs.parameters.DOCKER_REGISTRY_ADDRESS}}"
          - name: DOCKER_REGISTRY_IMAGE_NAME
            value: "{{inputs.parameters.DOCKER_REGISTRY_IMAGE_NAME}}"
          - name: DOCKER_REGISTRY_IMAGE_TAG
            value: "{{inputs.parameters.DOCKER_REGISTRY_IMAGE_TAG}}"

    - name: update-docker-builder
      steps:
        - - name: check-repo
            template: image-check
            arguments:
              parameters:
                - name: DOCKER_REGISTRY_ADDRESS
                  value: registry-svc.registry
                - name: DOCKER_REGISTRY_IMAGE_NAME
                  value: geekembly
                - name: DOCKER_REGISTRY_IMAGE_TAG
                  value: builder
        - - name: upload-builder-image
            arguments:
              parameters:
                - name: DOCKER_REGISTRY_ADDRESS
                  value: registry-svc.registry
                - name: DOCKER_REGISTRY_IMAGE_NAME
                  value: geekembly
                - name: DOCKER_REGISTRY_IMAGE_TAG
                  value: builder
                - name: DOCKER_FILE
                  value: geekembly/Dockerfile.builder
            template: kaniko-build
            when: "{{steps.check-repo.outputs.result}} == false"

    - name: github-clone
      script:
        image: bitnami/git:latest
        command: [sh]
        source: |
          #!/bin/bash
          mkdir -p /root/.ssh
          cp /github/id_rsa /root/.ssh/
          chmod 600 /root/.ssh/id_rsa
          touch /root/.ssh/known_hosts && ssh-keyscan github.com >> /root/.ssh/known_hosts

          cd /workspace
          git clone git@github.com:Cih2001/geekembly.git

        volumeMounts:
          - name: workspace
            mountPath: /workspace
          - name: ssh-vol
            mountPath: /github

    - name: github-tree-hash
      inputs:
        parameters:
          - name: path
          - name: git-dir
            value: .
      script:
        image: bitnami/git:latest
        command: [sh]
        source: |
          #!/bin/bash

          cd {{inputs.parameters.git-dir}}
          git ls-tree HEAD {{inputs.parameters.path}} --format='%(objectname)'

        volumeMounts:
          - name: workspace
            mountPath: /workspace

    - name: print-message
      inputs:
        parameters:
          - name: message
      container:
        image: alpine:latest
        command: [sh, -c]
        args: ["echo result was: {{inputs.parameters.message}}"]

    - name: start
      outputs:
        parameters:
          - name: push-skipped
            valueFrom:
              parameter: "{{tasks.check-image-tag-task.outputs.result}}"
          - name: release-tag
            valueFrom:
              parameter: "{{tasks.code-tag-task.outputs.result}}"
      dag:
        tasks:
          - name: clone-repo-task
            template: github-clone
          - name: update-docker-builder-task
            template: update-docker-builder
            dependencies: [clone-repo-task]
          - name: code-tag-task
            template: github-tree-hash
            dependencies: [clone-repo-task]
            arguments:
              parameters:
                - name: path
                  value: geekembly
                - name: git-dir
                  value: /workspace/geekembly
          - name: check-image-tag-task
            template: image-check
            dependencies: [code-tag-task]
            arguments:
              parameters:
                - name: DOCKER_REGISTRY_ADDRESS
                  value: registry-svc.registry
                - name: DOCKER_REGISTRY_IMAGE_NAME
                  value: geekembly
                - name: DOCKER_REGISTRY_IMAGE_TAG
                  value: "{{tasks.code-tag-task.outputs.result}}"
          - name: update-latest-task
            template: kaniko-build
            dependencies:
              [update-docker-builder-task, code-tag-task, check-image-tag-task]
            arguments:
              parameters:
                - name: DOCKER_REGISTRY_ADDRESS
                  value: registry-svc.registry
                - name: DOCKER_REGISTRY_IMAGE_NAME
                  value: geekembly
                - name: DOCKER_REGISTRY_IMAGE_TAG
                  value: "{{tasks.code-tag-task.outputs.result}}"
                - name: DOCKER_FILE
                  value: geekembly/Dockerfile
            when: "{{tasks.check-image-tag-task.outputs.result}} == false"
